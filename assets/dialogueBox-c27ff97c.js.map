{"version":3,"file":"dialogueBox-c27ff97c.js","sources":["../../dialogue-box/src/components/AvatarComponent.ts","../../dialogue-box/src/components/MessageComponent.ts","../../dialogue-box/src/components/DialogueBoxComponent.ts","../../dialogue-box/src/index.ts"],"sourcesContent":["export interface AvatarProps {\n    name: string;\n    image: string;\n}\n\nexport class AvatarComponent implements AvatarProps {\n    name: string;\n    image: string;\n\n    private avatarContainer: HTMLDivElement;\n\n    constructor(name: string = 'Unknown', image: string = '/dialogue-box/unknown.webp') {\n        this.name = name;\n        this.image = image;\n\n        this.avatarContainer = document.createElement('div');\n        this.avatarContainer.className = 'avatar-container';\n\n        this.setupDOM();\n    }\n\n    private setupDOM(): void {\n        let imageContainer = document.createElement('div');\n        imageContainer.className = 'avatar';\n\n        let avatarImage = document.createElement('img');\n        avatarImage.src = this.image;\n        imageContainer.appendChild(avatarImage);\n        this.avatarContainer.appendChild(imageContainer);\n\n        let avatarName = document.createElement('span');\n        avatarName.textContent = this.name;\n        this.avatarContainer.appendChild(avatarName);\n    }\n\n    render(): HTMLElement {\n        return this.avatarContainer;\n    }\n}\n","export interface MessageProps {\n  message: string;\n  hasContent: boolean;\n}\n\nconst BTN_LABEL = {\n  MORE_TEXT: 'Next',\n  NO_MORE_TEXT: 'Close',\n  NO_MORE_TEXT_BUT_CONTENT: 'VOIR',\n}\nconst MAX_CHAR = 240;\n\nexport class MessageComponent implements MessageProps {\n  message: string;\n  hasContent: boolean;\n\n  private messageContainer: HTMLDivElement;\n  private messageElement: HTMLParagraphElement;\n  private paginationElement: HTMLSpanElement;\n  private buttonElement: HTMLButtonElement;\n  private currentPageIndex: number;\n  private numberOfPages: number;\n  private pages: string[];\n\n  constructor(message: string = 'No message has been defined.', hasContent: boolean = false) {\n    this.message = message;\n    this.hasContent = hasContent;\n\n    this.messageContainer = document.createElement('div');\n    this.messageContainer.className = 'message-container';\n\n    this.messageElement = document.createElement('p');\n    this.paginationElement = document.createElement('span');\n    this.buttonElement = document.createElement('button');\n    this.currentPageIndex = 0;\n    this.numberOfPages = 0;\n    this.pages = this.paginateMessage();\n\n    this.setupDOM();\n  }\n\n  private setupDOM(): void {\n    let paginationContainer = document.createElement('div');\n    paginationContainer.className = 'pagination-container';\n    paginationContainer.appendChild(this.paginationElement);\n    paginationContainer.appendChild(this.buttonElement);\n\n    this.messageContainer.appendChild(this.messageElement);\n    this.messageContainer.appendChild(paginationContainer);\n\n    this.buttonElement.addEventListener('click', () => {\n      this.updateUI();\n    });\n\n    this.updateUI();\n  }\n\n  render(): HTMLElement {\n    return this.messageContainer;\n  }\n\n  private paginateMessage(): string[] {\n    // Extract sentences patterns from the message using a regular expression\n    const sentences = this.message.match(/\\b.*?[.!?](?=[\\s\\r\\n]|$)|\\b.*?(?=[\\r\\n])|\\b.+$/g) || [];\n    const result: string[] = [];\n\n    // Initialize variables to keep track of the current page content and page count\n    let currentPageContent = sentences.shift() || ''; // Start with the first sentence\n    let pagesCount = 1;\n\n    // Iterate through the remaining sentences\n    while (sentences.length > 0) {\n      const currentSentence = sentences.shift() || '';\n\n      if (currentPageContent.length + currentSentence.length + 1 <= MAX_CHAR) {\n        // If the current sentence fits within the character limit, add it to the current page\n        currentPageContent = currentPageContent + ' ' + currentSentence;\n      } else {\n        // If the sentence doesn't fit in one page, use word-based pagination for that sentence only\n        if (currentPageContent.length > MAX_CHAR) {\n          const words = currentPageContent.split(' ');\n          currentPageContent = words.shift() || '';\n\n          while (words.length > 0) {\n            const currentWord = words.shift() || '';\n\n            if (currentPageContent.length + currentWord.length + 1 <= MAX_CHAR) {\n              // If the current word fits within the character limit, add it to the current page\n              currentPageContent = currentPageContent + ' ' + currentWord;\n            } else {\n              // If the word exceeds the character limit, start a new page\n              pagesCount++;\n              result.push(currentPageContent);\n              currentPageContent = currentWord;\n            }\n          }\n        } else {\n          // If the sentence doesn't fit in the current page but can fit in one page, save the current page and start a new page\n          pagesCount++;\n          result.push(currentPageContent);\n          currentPageContent = currentSentence;\n        }\n      }\n    }\n\n    // Add the last page or the last part of the sentence\n    result.push(currentPageContent);\n\n    // Update the total number of pages\n    this.numberOfPages = pagesCount;\n\n    return result;\n  }\n\n  private updateUI(): void {\n    const currentPage = this.currentPageIndex + 1\n    this.messageElement.textContent = this.pages[this.currentPageIndex];\n\n    // Don't show pagination if there is only one page\n    if (this.numberOfPages > 1) {\n      this.paginationElement.textContent = currentPage + \"/\" + this.numberOfPages;\n    }\n\n    if (currentPage === this.numberOfPages) {\n      // Display last page\n      this.buttonElement.className = 'close';\n      this.buttonElement.textContent = this.hasContent ? BTN_LABEL.NO_MORE_TEXT_BUT_CONTENT : BTN_LABEL.NO_MORE_TEXT;\n\n      // Prepare the final button to close the UI\n      this.buttonElement.addEventListener('click', () => {\n        const closeEvent = new CustomEvent('destroy');\n        document.dispatchEvent(closeEvent);\n      });\n    } else {\n      // More pages to display\n      this.buttonElement.className = 'next';\n      this.currentPageIndex++\n      this.buttonElement.textContent = BTN_LABEL.MORE_TEXT;\n    }\n  }\n\n}","/// <reference types=\"@workadventure/iframe-api-typings\" />\n\nimport { AvatarComponent } from './AvatarComponent';\nimport { MessageComponent } from './MessageComponent';\nimport { DialogueInterface } from '../../../src/dialogues';\n\ninterface DialogueBoxProps {\n    npc: DialogueInterface;\n}\n\nexport class DialogueBoxComponent implements DialogueBoxProps {\n    npc: DialogueInterface;\n\n    private dialogueContainer: HTMLDivElement;\n    private avatarComponent: AvatarComponent;\n    private messageComponent: MessageComponent;\n\n    constructor(npc: DialogueInterface) {\n        this.npc = npc;\n\n        this.dialogueContainer = document.createElement('div');\n        this.dialogueContainer.className = 'dialogue-box';\n\n        if (this.npc.npcName) {\n            this.avatarComponent = new AvatarComponent(this.npc.npcName, `${this.npc.npcName}.png`);\n        }\n        \n        this.messageComponent = new MessageComponent(this.npc.message, !!this.npc.url);\n\n        this.setupDOM();\n\n        // This event is triggered from the pagination logic (when the 'Close' button is clicked)\n        document.addEventListener('destroy', async () => {\n            await WA.player.state.saveVariable(\"closeDialogueBoxEvent\", {\n                forceChange: new Date().getTime(),\n                npc: this.npc \n            }, {\n                public: false,\n                persist: false,\n                scope: \"room\",\n            });\n\n            // get current iframe ID\n            const websiteId = WA.iframeId;\n            if (websiteId) {\n                const website = await WA.ui.website.getById(websiteId);\n                website?.close()\n            }\n        });\n    }\n\n    private setupDOM(): void {\n        if (this.npc.npcName) {\n            const avatarContainer = this.avatarComponent.render();\n            this.dialogueContainer.appendChild(avatarContainer);\n        }\n        \n        const messageContainer = this.messageComponent.render();\n        this.dialogueContainer.appendChild(messageContainer);\n    }\n\n    render(): HTMLElement {\n        return this.dialogueContainer;\n    }\n}","import { DialogueBoxComponent } from './components/DialogueBoxComponent';\nimport { DialogueInterface, getDialogues } from '../../src/dialogues';\n\nconsole.info('\"Dialogue Box\" script started successfully')\n\nlet currentNPC: DialogueInterface|undefined\n\nasync function process() {\n  const url = new URL(window.location.toString())\n  const npcId = url.searchParams.get(\"id\")\n\n  currentNPC = getDialogues().find(c => c.id === npcId)\n\n  if (currentNPC && currentNPC.message) {\n\n    const dialogueBoxComponent = new DialogueBoxComponent(currentNPC);\n\n    if (appElement) {\n      appElement.appendChild(dialogueBoxComponent.render());\n    } else {\n      console.error(\"Element with ID 'app' not found.\");\n    }\n  } else {\n    console.error(\"Undefined NPC data\");\n  }\n}\n\nconst appElement = document.getElementById('app');\n\n// Why this weird syntax ?\n// Flexibility: Works well whether the script is in the `<head>` or `<body>`.\n// Efficiency: Avoids setting up unnecessary event listeners if the DOM is already loaded.\n// Robustness: Handles both scenarios (loading or loaded) to prevent race conditions.\nWA.onInit().then(() => {\n  process()\n});\n"],"names":["AvatarComponent","name","image","__publicField","imageContainer","avatarImage","avatarName","BTN_LABEL","MAX_CHAR","MessageComponent","message","hasContent","paginationContainer","sentences","result","currentPageContent","pagesCount","currentSentence","words","currentWord","currentPage","closeEvent","DialogueBoxComponent","npc","websiteId","website","avatarContainer","messageContainer","currentNPC","process","npcId","getDialogues","c","dialogueBoxComponent","appElement"],"mappings":"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"}